@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Threading
@namespace Sandbox.UI
@attribute [StyleSheet]

@if ( Result == null )
{
    return;
}

<root class="packagefilter">

    <div class="left">

    @foreach ( var facet in Result.Facets )
    {
        filterFacets.TryGetValue( facet.Name, out var value );

        <HLPackageFilterFacet Facet="@facet" Value="@value" OnChange="@OnFacetChanged"></HLPackageFilterFacet>
    }

    </div>

    <div class="right">
        <TextEntry placeholder="Search.." OnTextEdited=@OnSearchEdited></TextEntry>
        <HLPackageFilterOrder Orders="@Result.Orders" Value="@filterOrder" OnChange="@OnOrderChanged"></HLPackageFilterOrder>
    </div>

</root>

@code
{
    public string Query { get; set; }
    public string SearchString { get; set; }
    public Package.FindResult Result { get; set; }
    public Action<string> OnChange { get; set; }

    List<string> filterTypes;
    Dictionary<string, string> filterFacets;
    string filterOrder;

    RealTimeUntil timeUntilRunDebouncedAction;
    Action debouncedAction;

    protected override void OnParametersSet()
    {
        BuildFilter( Query );
    }

    void BuildFilter( string query )
    {
        string[] parts = query.Split(' ');
        filterTypes = parts.Where(x => x.StartsWith("type:")).Select(x => x.Substring(5)).ToList();
        filterOrder = parts.Where(x => x.StartsWith("sort:")).Select(x => x.Substring(5)).FirstOrDefault();
        filterFacets = parts.Where( x => x.Contains( ":" ) )
                                        .Select(x => x.Split( ":" ))
                                        .Where( x => x[0] != "type" )
                                        .Where( x => x[0] != "sort" )
                                        .Where( x => x.Length == 2 )
                                        .ToDictionary( x => x[0], x => x[1]) ;
    }

    string BuildQuery()
    {
        var q = "";

        foreach (var t in filterTypes)
            q += $" type:{t}";        

        foreach (var t in filterFacets)
            q += $" {t.Key}:{t.Value}";

        if ( !string.IsNullOrWhiteSpace(filterOrder) )
            q += $" sort:{filterOrder}";

        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            q += $" {SearchString}";
        }

        Log.Info( q );

        return q;
    }

    void OnSearchEdited( string value )
    {
        debouncedAction = () =>
        {
            SearchString = value;
            OnChange?.Invoke(BuildQuery());
        };

        timeUntilRunDebouncedAction = 0.5f;
    }

    void OnFacetChanged( Package.Facet facet, string value )
    {
        if (string.IsNullOrEmpty(value))
            filterFacets.Remove(facet.Name);
        else
            filterFacets[facet.Name] = value;

        OnChange?.Invoke( BuildQuery() );
    }

    void OnOrderChanged( string value )
    {
        filterOrder = value;
        OnChange?.Invoke( BuildQuery() );
    }

    public override void Tick()
    {
        if ( debouncedAction != null && timeUntilRunDebouncedAction <= 0.0f )
        {
            debouncedAction();
            debouncedAction = null;
        }
    }
}
