@using Sandbox.UI;
@using Sandbox;
@using System;
@using System.Collections.Generic;
@using System.Linq;

@namespace Sandbox

<root>
	<div class="canvas" @ref=Canvas />
	<TextEntry @ref=Input onsubmit=@Submit onblur=@Close />
</root>

@code
{
	public static Chat Current;

	public Panel Canvas { get; protected set; }
	public TextEntry Input { get; protected set; }

	Queue<ChatRow> Rows = new();

	protected int MaxItems => 100;
	protected float MessageLifetime => 10f;

	public bool IsOpen
	{
		get => HasClass( "open" );
		set
		{
			SetClass( "open", value );
			if ( value )
			{
				Input.Focus();
				Input.Text = string.Empty;
				Input.Label.SetCaretPosition( 0 );
			}
		}
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		Canvas.PreferScrollToBottom = true;
		Input.AcceptsFocus = true;
		Input.AllowEmojiReplace = true;

		Current = this;
	}

	public override void Tick()
	{
		if ( Sandbox.Input.Pressed( InputButton.Chat ) )
			Open();

		Input.Placeholder = string.IsNullOrEmpty( Input.Text ) ? "Enter your message..." : string.Empty;
	}

	void Open()
	{
		AddClass( "open" );
		Input.Focus();
		Canvas.TryScrollToBottom();
	}

	void Close()
	{
		RemoveClass( "open" );
		Input.Blur();
	}

	void Submit()
	{
		Close();

		var msg = Input.Text.Trim();
		Input.Text = "";

		if ( string.IsNullOrWhiteSpace( msg ) ) return;

		Say( msg );
	}

	public void AddEntry( string name, string message, long playerId = 0, bool isInfo = false )
	{
		var e = Canvas.AddChild<ChatRow>();

		var player = Game.LocalPawn;
		if ( !player.IsValid() ) return;

		if ( playerId > 0 )
			e.PlayerId = playerId;

		e.Message = message;
		e.Name = $"{name}";

		e.SetClass( "noname", string.IsNullOrEmpty( name ) );
		e.SetClass( "info", isInfo );
		e.BindClass( "stale", () => e.Lifetime > MessageLifetime );

		var cl = Game.Clients.FirstOrDefault( x => x.SteamId == playerId );
		if ( cl.IsValid() )
			e.SetClass( "friend", cl.IsFriend || Game.SteamId == playerId );

		Canvas.TryScrollToBottom();

		Rows.Enqueue( e );

		// Kill an item if we need to
		if ( Rows.Count > MaxItems )
			Rows.Dequeue().Delete();
	}
}
